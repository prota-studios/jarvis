// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/prota-studios/javis/models"
)

// ListUpcomingMeetingsHandlerFunc turns a function with the right signature into a list upcoming meetings handler
type ListUpcomingMeetingsHandlerFunc func(ListUpcomingMeetingsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListUpcomingMeetingsHandlerFunc) Handle(params ListUpcomingMeetingsParams) middleware.Responder {
	return fn(params)
}

// ListUpcomingMeetingsHandler interface for that can handle valid list upcoming meetings params
type ListUpcomingMeetingsHandler interface {
	Handle(ListUpcomingMeetingsParams) middleware.Responder
}

// NewListUpcomingMeetings creates a new http.Handler for the list upcoming meetings operation
func NewListUpcomingMeetings(ctx *middleware.Context, handler ListUpcomingMeetingsHandler) *ListUpcomingMeetings {
	return &ListUpcomingMeetings{Context: ctx, Handler: handler}
}

/*ListUpcomingMeetings swagger:route GET /zoom/meetings/upcoming listUpcomingMeetings

ListUpcomingMeetings list upcoming meetings API

*/
type ListUpcomingMeetings struct {
	Context *middleware.Context
	Handler ListUpcomingMeetingsHandler
}

func (o *ListUpcomingMeetings) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListUpcomingMeetingsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListUpcomingMeetingsOKBody list upcoming meetings o k body
//
// swagger:model ListUpcomingMeetingsOKBody
type ListUpcomingMeetingsOKBody struct {

	// meetings
	Meetings []*models.Meeting `json:"meetings"`
}

// Validate validates this list upcoming meetings o k body
func (o *ListUpcomingMeetingsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMeetings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListUpcomingMeetingsOKBody) validateMeetings(formats strfmt.Registry) error {

	if swag.IsZero(o.Meetings) { // not required
		return nil
	}

	for i := 0; i < len(o.Meetings); i++ {
		if swag.IsZero(o.Meetings[i]) { // not required
			continue
		}

		if o.Meetings[i] != nil {
			if err := o.Meetings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listUpcomingMeetingsOK" + "." + "meetings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListUpcomingMeetingsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListUpcomingMeetingsOKBody) UnmarshalBinary(b []byte) error {
	var res ListUpcomingMeetingsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
